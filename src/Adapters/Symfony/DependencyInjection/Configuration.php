<?php

declare(strict_types=1);

namespace Inesta\Schemas\Adapters\Symfony\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

/**
 * Configuration for the Schema.org Symfony bundle.
 *
 * Defines the configuration structure and default values
 * for the Schema.org library within Symfony applications.
 */
final class Configuration implements ConfigurationInterface
{
    /**
     * Build the configuration tree.
     *
     * @return TreeBuilder The configuration tree builder
     */
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('schema');
        $rootNode = $treeBuilder->getRootNode();

        $rootNode
            ->children()
            ->scalarNode('context')
            ->defaultValue('https://schema.org')
            ->info('The default Schema.org context URL')
            ->end()
            ->enumNode('default_renderer')
            ->values(['json_ld', 'microdata', 'rdfa'])
            ->defaultValue('json_ld')
            ->info('The default renderer to use')
            ->end()
            ->arrayNode('json_ld')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('pretty_print')
            ->defaultTrue()
            ->info('Whether to pretty print JSON-LD output')
            ->end()
            ->booleanNode('include_script_tag')
            ->defaultTrue()
            ->info('Whether to include HTML script tag wrapper')
            ->end()
            ->booleanNode('unescape_slashes')
            ->defaultTrue()
            ->info('Whether to unescape forward slashes')
            ->end()
            ->booleanNode('unescape_unicode')
            ->defaultTrue()
            ->info('Whether to unescape Unicode characters')
            ->end()
            ->booleanNode('compact_output')
            ->defaultFalse()
            ->info('Whether to remove empty properties')
            ->end()
            ->end()
            ->end()
            ->arrayNode('microdata')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('pretty_print')
            ->defaultTrue()
            ->info('Whether to pretty print Microdata output')
            ->end()
            ->booleanNode('use_semantic_elements')
            ->defaultTrue()
            ->info('Whether to use semantic HTML elements')
            ->end()
            ->booleanNode('include_meta_elements')
            ->defaultTrue()
            ->info('Whether to include meta elements for non-visible properties')
            ->end()
            ->scalarNode('container_element')
            ->defaultValue('div')
            ->info('The default container element')
            ->end()
            ->end()
            ->end()
            ->arrayNode('rdfa')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('pretty_print')
            ->defaultTrue()
            ->info('Whether to pretty print RDFa output')
            ->end()
            ->booleanNode('use_semantic_elements')
            ->defaultTrue()
            ->info('Whether to use semantic HTML elements')
            ->end()
            ->booleanNode('include_meta_elements')
            ->defaultTrue()
            ->info('Whether to include meta elements for non-visible properties')
            ->end()
            ->scalarNode('container_element')
            ->defaultValue('div')
            ->info('The default container element')
            ->end()
            ->end()
            ->end()
            ->arrayNode('validation')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('enabled')
            ->defaultTrue()
            ->info('Whether validation is enabled')
            ->end()
            ->booleanNode('strict_mode')
            ->defaultFalse()
            ->info('Whether to use strict validation mode')
            ->end()
            ->arrayNode('rules')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('required_properties')
            ->defaultTrue()
            ->info('Validate required properties')
            ->end()
            ->booleanNode('property_types')
            ->defaultTrue()
            ->info('Validate property types')
            ->end()
            ->booleanNode('empty_values')
            ->defaultTrue()
            ->info('Check for empty values')
            ->end()
            ->booleanNode('schema_org_compliance')
            ->defaultTrue()
            ->info('Validate Schema.org compliance')
            ->end()
            ->end()
            ->end()
            ->end()
            ->end()
            ->arrayNode('cache')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('enabled')
            ->defaultFalse()
            ->info('Whether caching is enabled')
            ->end()
            ->integerNode('ttl')
            ->defaultValue(3600)
            ->info('Cache TTL in seconds')
            ->end()
            ->scalarNode('prefix')
            ->defaultValue('schema:')
            ->info('Cache key prefix')
            ->end()
            ->end()
            ->end()
            ->arrayNode('debug')
            ->addDefaultsIfNotSet()
            ->children()
            ->booleanNode('enabled')
            ->defaultFalse()
            ->info('Whether debug mode is enabled')
            ->end()
            ->booleanNode('log_validation_errors')
            ->defaultFalse()
            ->info('Whether to log validation errors')
            ->end()
            ->booleanNode('log_rendering_time')
            ->defaultFalse()
            ->info('Whether to log rendering performance')
            ->end()
            ->end()
            ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
